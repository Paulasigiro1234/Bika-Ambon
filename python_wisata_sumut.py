# -*- coding: utf-8 -*-
"""Python Wisata Sumut

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19pfuX9dan9GZN6QKxJ40igFhOvOt9auC
"""

# import library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt

# split train set dan test set
from sklearn.model_selection import train_test_split

# standardization
from sklearn.preprocessing import StandardScaler

# mencari model dengan setting-an hyperparameter terbaik
from sklearn.model_selection import GridSearchCV

# model Decision Tree
from sklearn.tree import DecisionTreeClassifier

# menilai performa model
from sklearn.metrics import classification_report

# visualisasi untuk model Decision Tree
from sklearn import tree

# save model untuk deploy
import joblib
import pickle

# library untuk mengabaikan pesan warning
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/Sumut_Go.csv")
df = df.drop(['Capwaktu','DeskripsiSingkatPengalaman','TingkatKepuasanPengunjung'],axis = 1)
# df = df.rename(columns={'Budget (Pengeluaran)': 'Budget'})
df.head()

df.isnull().sum()

Budget_mode = df['Budget'].mode()
df['Budget'].fillna(Budget_mode[0], inplace=True)

df['Usia'] = df['Usia'].map({'Remaja':0,'Dewasa':1,'Anak-anak':2,'Lansia':3})

df['KategoriKunjungan'] = df['KategoriKunjungan'].map({'Komunitas':0,'Keluarga':1,'Tunggal':2,'Berdua':3})

df['JenisWisata'] = df['JenisWisata'].map({'Wisata Alam':0,'Wisata Kuliner':1,'Wisata Religi':2,'Wisata Sejarah dan Budaya':3})

# df['NamaWisata'] = df['NamaWisata'].map({'18. Aek Sijorni Tapanuli Selatan':0,
#                                            '22. Pemandian Bah Damanik':1,
#                                            '3. Danau Toba':2,
#                                            '1. Air Terjun Ponot Kisaran':3,
#                                            '16. Pusuk Buhit Samosir':4,
#                                            '12. Roti Ganda Siantar':5,
#                                            '14. Bukit Sibea bea':6,
#                                            '2. Taman Wisata Iman Sidikalang':7,
#                                            '4. Mickey Holiday':8,
#                                            '6. Geosite Sipinsur':9,
#                                            '17. Aek Sipitu Dai Samosir':10,
#                                            '8. Landak River':11,
#                                            '11. Ucok Durian Medan':12,
#                                            '13. Menara Pandang Tele':13,
#                                            '23. Wisata Merci':14,
#                                            '5. Pasar Kamu Deli Serdang':15,
#                                            '21. Istana Maimun':16,
#                                            '9. Bukit Lawang':17,
#                                            '15. Pusat TB Silalahi (Museum Balige)':18})

df['Budget'] = df['Budget'].map({'Low':0,'Medium':1,'High':2})

df['AkomodasiPenginapan'] = df['AkomodasiPenginapan'].map({'Villa':0,'Tidak Menginap':1,'Hotel':2,'Tenda':3,'Kost':4})

df['Transportasi'] = df['Transportasi'].map({'Bus':0,'Motor':1,'Mobil':2,'Sepeda':3,'Jalan Kaki':4})


col = df.pop("NamaWisata")
df.insert(0, col.name, col)
df.head()

X = df.drop(['NamaWisata'],axis=1).values
y = df['NamaWisata'].values

from imblearn.over_sampling import RandomOverSampler
ovr = RandomOverSampler(random_state=42) # feature ke nol (kolom Gender) merupakan feature kategorikal
X_res, y_res = ovr.fit_resample(X, y)

X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=14, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0, 
                       min_samples_leaf=2, min_samples_split=7,
                       min_weight_fraction_leaf=0.0, 
                       random_state=123, splitter='best')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

"""# Rekomender System"""

df_rec = pd.read_csv("/content/Sumut_Go.csv")
df_rec = df_rec.drop(['Capwaktu','Usia','KategoriKunjungan','Budget','AkomodasiPenginapan','Transportasi','TingkatKepuasanPengunjung','DeskripsiSingkatPengalaman'],axis = 1)

# periksa jumlah data duplikat
df_rec.duplicated().sum()

df_rec.drop_duplicates(inplace=True)

df_rec

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi objek tfidf
tfidf = TfidfVectorizer(max_features=5000)

# Transform data
vectorized_data = tfidf.fit_transform(df_rec['JenisWisata'].values)

vectorized_data

vectorized_dataframe = pd.DataFrame(vectorized_data.toarray(), index=df_rec['JenisWisata'].index.tolist())

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectorized_dataframe)

def recommendation(position):
    id_of_position = df_rec[df_rec['NamaWisata']==position].index[0]
    distances = similarity[id_of_position]
    position_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:10]
    
    for i in position_list:
       a = df_rec.iloc[i[0]].NamaWisata
    
   
    print(f'recomendation Wisata Lain: {a}', end='')

"""# Interface Preparation"""

def Jenis_Wisata(JenisWisata):
  if JenisWisata == 'Wisata Alam':
    result = 0
  elif JenisWisata == 'Wisata Kuliner':
    result = 1
  elif JenisWisata == 'Wisata Religi':
    result = 2                
  elif JenisWisata == 'Wisata Sejarah dan Budaya':
    result = 3                             
  return result

"""# User Interface"""

# input data baru
JenisWisata = 'Wisata Kuliner' #@param ['Wisata Alam','Wisata Kuliner','Wisata Religi','Wisata Sejarah dan Budaya']{type:"string"}
JenisWisata = Jenis_Wisata(JenisWisata)
Usia	 = 1 #@param [0,1,2,3]{type:"raw"}
KategoriKunjungan = 0 #@param [0,1,2,3]{type:"raw"}
Budget = 1 #@param [0,1,2]{type:"raw"}
AkomodasiPenginapan = 0 #@param [0,1,2,3,4]{type:"raw"}
Transportasi = 1#@param [0,1,2,3,4]{type:"raw"}



# initialize list of lists
data = [[Usia,KategoriKunjungan,JenisWisata,Budget,AkomodasiPenginapan,Transportasi]]
  
# Create the pandas DataFrame
New_Data = pd.DataFrame(data, columns=['Usia','KategoriKunjungan','JenisWisata','Budget','AkomodasiPenginapan','Transportasi'])

Prediction = model.predict(New_Data)
pred = Prediction
rec_str = pred.item()[:]

# hasil prediksi
print("\n")
print(f'Kunjungan Wisata yang Direkomendasikan: {rec_str}', end='')
print("\n")
rec = recommendation(rec_str)

"""# Save Model"""

pickle.dump(model, open('model_ds.pkl', 'wb'))